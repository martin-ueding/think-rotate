#!/bin/bash

# Script orignally from http://forum.thinkpads.com/viewtopic.php?p=676101#p676101.
# Changes Copyright © 2012-2014 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

set -e

TEXTDOMAIN=thinkpad-scripts
lock=/tmp/thinkpad-scripts.lock

mylogger() {
    echo "$@"
    logger -t thinkpad-rotate -i -- "$@"
}

remove-lock() {
    mylogger "Removing lock …"
    rm -f "$lock"
}

exit-hook() {
    remove-lock
    kdialog-exit
}
trap exit-hook EXIT

mylogger "Script starting up (args: $@) …"

for import in external.sh kdialog.sh upgrade.sh
do
    for dir in lib /usr/share/thinkpad-scripts
    do
        importfile="$dir/$import"
        if [[ -f "$importfile" ]]
        then
            . "$importfile"
        fi
    done
done

run-upgrades

mylogger $"Running as user $USER."
mylogger $"\$HOME is set to ${HOME-}."
mylogger $"\$HOME is now set to ${HOME=/home/$USER}."

if [[ -f "$lock" ]]
then
    mylogger $"Exiting, because there is more than one running."
    stat "$lock"
    exit 0
else
    mylogger $"No other running instances found."
    touch "$lock"
fi

###############################################################################
#                                   options                                   #
###############################################################################

# The name of the internal display.
internal="LVDS1"

# The name of the virtual keyboard.
virtual_kbd="kvkbd"

# Default rotation.
default_rotation=right

toggle_unity_launcher=false

# Now import the configuration file if there is one. That will replace any
# options set above.
configfile="$HOME/.config/thinkpad-scripts/rotate.sh"

prerotate_hook="$HOME/.config/thinkpad-scripts/hooks/prerotate"
postrotate_hook="$HOME/.config/thinkpad-scripts/hooks/postrotate"

if [[ -f "$configfile" ]]
then
    source "$configfile"
fi

kdialog-init $"thinkpad-rotate" 9
kdialog-update $"Reading config file"

mylogger $"Executing pre-hooks"
kdialog-update $"Executing pre-hooks"
if [[ -f "$prerotate_hook" ]]
then
    "$prerotate_hook"
fi

###############################################################################
#                               current status                                #
###############################################################################

mylogger $"Finding current rotation"
kdialog-update $"Finding current rotation"

# Find the line in ``xrandr -q --verbose`` output that contains current screen
# orientation and strip out current orientation.
rotation="$(xrandr -q --verbose | grep 'connected' | grep "$internal" | egrep -o  '\) (normal|left|inverted|right) \(' | egrep -o '(normal|left|inverted|right)')"

mylogger $"Current status is $rotation."

###############################################################################
#                                new rotation                                 #
###############################################################################

mylogger $"Infering new rotation"
kdialog-update $"Infering new rotation"

# If the user specified a rotation, set it to that. If not, use left or default
# orientation.
if [[ -n "$1" ]]
then
    # The users specified a rotation. Set the screen to that state if the
    # current state is not the desired one. If the desired one is the current,
    # go back. This allows to toggle with the same call.
    if [[ "$1" = "$rotation" ]]
    then
        mylogger $"You try to rotate into the direction it is, reverting to normal."
        setto=normal
    else
        setto="$1"
        mylogger $"User chose to set to $setto."
    fi
else
    # The user did not specify anything. Set it to right or revert.
    case "$rotation" in
        normal)
            setto=${default_rotation}
            mylogger $"Using default, setting to $setto."
            ;;
        *)
            setto=normal
            mylogger $"Using default, reverting to normal."
    esac
fi

# Translate directions into ``xrandr`` and ``xsetwacom`` names.
# Also make ``setto`` be only "normal", "right", "inverted", or "left"
case "$setto" in
    none|normal)
        setto=normal
        xrandr_rotation=normal
        wacom_rotation=none
        ;;
    cw|right)
        setto=right
        xrandr_rotation=right
        wacom_rotation=cw
        ;;
    half|inverted|flip)
        setto=inverted
        xrandr_rotation=inverted
        wacom_rotation=half
        ;;
    ccw|left)
        setto=left
        xrandr_rotation=left
        wacom_rotation=ccw
        ;;
    *)
        mylogger $"You specified a direction that is not known. Try either normal, right, flip or left. See thinkpad-rotate(1) for more information."
        exit 2
esac

# Perform the actual rotation.
mylogger $"Rotating screen"
kdialog-update $"Rotating screen"
xrandr --output "$internal" --rotate "$xrandr_rotation"

# Rotate the Wacom devices.
mylogger $"Rotating Wacom devices to $wacom_rotation."
kdialog-update $"Rotating Wacom devices to $wacom_rotation."

xsetwacom list devices | grep 'Wacom ISD' | sed 's/id: .*//' | while read device
do
    xsetwacom set "$device" rotate "$wacom_rotation"
    xsetwacom set "$device" MapToOutput "$internal"
done

###############################################################################
#                             subpixel anti-alias                             #
###############################################################################

mylogger $"Setting subpixel anti-alias order"
kdialog-update $"Setting subpixel anti-alias order"

# Check if an external display is attached. If one is attached and the rotations
# of the two displays conflict, then disable subpixel rendering.
find-external
if [[ -n "$external" ]]
then
    if [[ "$setto" = 'normal' ]]
    then
        spaa_order=rgb
    else
        spaa_order=none
    fi
else
    case "$setto" in
        normal)
            spaa_order=rgb
            ;;
        inverted)
            spaa_order=bgr
            ;;
        left)
            spaa_order=vrgb
            ;;
        right)
            spaa_order=vbgr
            ;;
    esac
fi

mylogger $"Subpixel order will be set to $spaa_order."

# XFCE
if type xfconf-query &> /dev/null
then
    xfconf-query -c xsettings -p /Xft/RGBA -s "$spaa_order"
# GNOME
elif type gsettings &> /dev/null
then
    gsettings set org.gnome.settings-daemon.plugins.xsettings rgba-order "$spaa_order"
# Others
else
    mylogger $"No supported program is installed that can change the subpixel order"
fi

###############################################################################
#                               Unity launcher                                #
###############################################################################

if [[ "$toggle_unity_launcher" = 'true' ]]
then
    mylogger $"Toggle Unity launcher"

    if [[ "$setto" = 'normal' ]]
    then
        dconf write '/org/compiz/profiles/unity/plugins/unityshell/launcher-hide-mode' 1
    else
        dconf write '/org/compiz/profiles/unity/plugins/unityshell/launcher-hide-mode' 0
    fi
fi

###############################################################################
#                              virtual keyboard                               #
###############################################################################

mylogger $"Starting or killing virtual keyboard"
kdialog-update $"Starting or killing virtual keyboard"

# Start the virtual keyboard, if it is installed.
if type "$virtual_kbd" &> /dev/null
then
    if [[ "$setto" = "normal" ]]
    then
        # So the user reverts back to normal. Kill the virtual keyboard (if it
        # is running), since it does not make any sense to use that any more.
        if pgrep "$virtual_kbd" &> /dev/null
        then
            killall "$virtual_kbd"
        fi
    else
        # The user rotated the screen. Start the virtual keyboard since he
        # might need it.
        "$virtual_kbd" &> /dev/null &
    fi
fi

###############################################################################
#                           TrackPoint and TouchPad                           #
###############################################################################

mylogger $"Enabling/Disabling TrackPoint and TouchPad"
kdialog-update $"Enabling/Disabling TrackPoint and TouchPad"

# Enable and disable the TrackPoint. First, find the id of the TrackPoint.
trackpoint_id="$(xinput list | grep TrackPoint | grep --only-matching -P 'id=(\d+)' | cut -c 4-)"
touchpad_id="$(xinput list | grep TouchPad | grep --only-matching -P 'id=(\d+)' | cut -c 4-)"

# Set the mode to which the input devices should be set.
if [[ "$setto" = "normal" ]]
then
    input_to=1
else
    input_to=0
fi

for device in "$trackpoint_id" "$touchpad_id"
do
    mylogger $"Toggling input device $device to $input_to."
    xinput set-prop "$device" "Device Enabled" "$input_to"
done

mylogger $"Executing post-hooks"
kdialog-update $"Executing post-hooks"
if [[ -f "$postrotate_hook" ]]
then
    "$postrotate_hook" "$setto"
fi
