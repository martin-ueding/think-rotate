#!/bin/bash
# Copyright © 2012 Martin Ueding <dev@martin-ueding.de>

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.

logger -t think-dock -- "Script starting up ($@) …"

set -e
set -u

echo "Running as $USER."

###############################################################################
#                                   options                                   #
###############################################################################

# Whether to disable the wifi when going onto the docking station.
disable_wifi=true

# The name of the internal display.
internal="LVDS1"

# Whether to unmute when going onto the docking station. Usually, the speakers
# are muted in the field, but at home you want to have sound.
unmute=true

# The settings for the loudness on the dock and off the dock.
dock_loudness="100%"
undock_loudness="50%"

# Whether to change the brightness of the internal display when docking.
set_brightness=true

# The value to set the brightness to. Needs to be given as a percentage.
brightness="60%"

relative_position="right"

# Now import the configuration file if there is one. That will replace any
# options set above.
configfile="$HOME/.config/think-rotate/dock.sh"

if [[ -f "$configfile" ]]
then
	source "$configfile"
fi

# Determine the action.
case "${1:-auto}" in
	on)
		echo "Docking, since user said so."
		setto=on
		;;
	off)
		echo "Un-docking, since user said so."
		setto=off
		;;
	auto)
		# Sleep since the docking needs some time to change. This is just a
		# HACK against a race condition, but it should work.
		sleep 1

		# Check the kernel whether the ThinkPad is on the docking station.
		kernel_docked="$(cat /sys/devices/platform/dock.0/docked)"

		if (( kernel_docked == 1 ))
		then
			# The display is not enabled. Time to dock.
			echo "Docking, since computer is already docked."
			setto=on
		else
			# The notebook is probably already un-docked. So it is time to
			# un-dock.
			echo "Un-docking since computer is not docked."
			setto=off
		fi
esac

# Write the determined action into the system log.
logger -t "think-dock" -- "Now changing to $setto with ${1:-auto} mode."

# Dynamically find the external display by searching for connected displays
# that are not the internal one. If there is no external display connected,
# that will result in an empty variable.
if external="$(xrandr | grep -Eo '(\S+) connected' | grep -Eo '^(\S+)' | grep -v "$internal")"
then
	echo "External display $external found."
else
	echo "No external display found."
fi

case "$setto" in
	on)
		(
		# Enable audio and set it to full volume.
		if [[ "$unmute" = "true" ]] && type pactl > /dev/null 2>&1
		then
			pactl set-sink-volume 0 "$dock_loudness"
			pactl set-sink-mute 0 0
		fi
		) &

		(
		# Set the brightness to a given percentage. My external display
		# obviously has the same brightness all the time, so the internal
		# should have a fixed one as well.
		if [[ "$set_brightness" = "true" ]] && type xbacklight > /dev/null 2>&1
		then
			xbacklight -set "$brightness"
		fi

		# Set the displays to the right setting.
		xrandr --output "$internal" --auto
		xrandr --output "$external" --auto "--${relative_position}-of" \
			"$internal" --primary
		) &

		(
		# Disable the wireless connection, if the user specified the option,
		# the ``nmcli`` tool is available and the computer is actually
		# connected to the ethernet.
		if [[ "$disable_wifi" = "true" ]] && type nmcli > /dev/null 2>&1 && [[ "$(cat "/sys/class/net/eth0/carrier")" = 1 ]]
		then
			# FIXME This does not work if invoked via the ``su -c '…' user``
			# command from think-dock-hook.
			nmcli nm wifi off
		fi


		# Reboot the wired connection since that sometimes go bad.
		if type nmcli &> /dev/null && nmcli con | grep DHCP &> /dev/null
		then
			nmcli con down id DHCP
			nmcli con up id DHCP
		fi
		) &

		;;
	off)
		(
		# Disable the external display and make the internal the primary again.
		xrandr --output "$internal" --auto --primary

		if [[ -n "${external:-}" ]]
		then
			xrandr --output "$external" --off
		fi
		) &

		(
		# Set the loudness a little lower so that they do not sound screaming.
		if [[ "$unmute" = "true" ]] && type pactl > /dev/null 2>&1
		then
			pactl set-sink-volume 0 "$undock_loudness"
		fi
		) &

		(
		# Enable the wireless connection.
		if [[ "$disable_wifi" = "true" ]] && type nmcli > /dev/null 2>&1
		then
			nmcli nm wifi on
		fi
		) &

		;;
esac

###############################################################################
#                                Wacom devices                                #
###############################################################################

(
# Set the Wacom devices to the internal display. If this is not done, they are
# stretched out over both displays which makes no sense.
xsetwacom list devices | grep 'Wacom ISD' | sed 's/id: .*//' | while read device
do
	xsetwacom set "$device" MapToOutput "$internal"
done
) &

wait

logger -t think-dock -- "Script finishing …"
