#!/bin/bash

# Script orignally from http://forum.thinkpads.com/viewtopic.php?p=676101#p676101.
# Changes Copyright Â© 2012 Martin Ueding <dev@martin-ueding.de>

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.

set -e

###############################################################################
#                                   options                                   #
###############################################################################

# The name of the internal display.
internal="LVDS1"

# The name of the virtual keyboard.
virtual_kbd="kvkbd"

# Now import the configuration file if there is one. That will replace any
# options set above.
configfile="$HOME/.config/think-rotate/rotate.sh"

if [[ -f "$configfile" ]]
then
	source "$configfile"
fi

###############################################################################
#                               current status                                #
###############################################################################

# Find the line in ``xrandr -q --verbose`` output that contains current screen
# orientation and strip out current orientation.
rotation="$(xrandr -q --verbose | grep 'connected' | grep "$internal" | egrep -o  '\) (normal|left|inverted|right) \(' | egrep -o '(normal|left|inverted|right)')"

echo "Current status is $rotation."

###############################################################################
#                                new rotation                                 #
###############################################################################

# If the user specified a rotation, set it to that. If not, use left or default
# orientation.
if [[ -n "$1" ]]
then
	# The users specified a rotation. Set the screen to that state if the
	# current state is not the desired one. If the desired one is the current,
	# go back. This allows to toggle with the same call.
	if [[ "$1" = "$rotation" ]]
	then
		echo "You try to rotate into the direction it is, reverting to normal."
		setto=normal
	else
		setto="$1"
		echo "User chose to set to $setto."
	fi
else
	# The user did not specify anything. Set it to right or revert.
	case "$rotation" in
		normal)
			setto=right
			echo "Using default, setting to $setto."
			;;
		*)
			setto=normal
			echo "Using default, reverting to normal."
	esac
fi

# Translate directions into ``xrandr`` and ``xsetwacom`` names.
case "$setto" in
	none|normal)
		xrandr_rotation=normal
		wacom_rotation=none
		;;
	cw|right)
		xrandr_rotation=right
		wacom_rotation=cw
		;;
	half|inverted|flip)
		xrandr_rotation=inverted
		wacom_rotation=half
		;;
	ccw|left)
		xrandr_rotation=left
		wacom_rotation=ccw
		;;
	*)
		echo "You specified a direction that is not known. Try either normal, right, flip or left. See think-rotate(1) for more information."
		exit 2
esac

# Perform the actual rotation.
xrandr --output "$internal" --rotate "$xrandr_rotation"

# Rotate the Wacom devices.
echo "Rotating Wacom devices to $wacom_rotation."

xsetwacom list devices | sed 's/id: .*//' | while read device
do
	xsetwacom set "$device" rotate "$wacom_rotation"
done

###############################################################################
#                              virtual keyboard                               #
###############################################################################

# Start the virtual keyboard, if it is installed.
if type "$virtual_kbd" > /dev/null 2>&1
then
	if [[ "$setto" = "normal" ]]
	then
		# So the user reverts back to normal. Kill the virtual keyboard (if it
		# is running), since it does not make any sense to use that any more.
		if pgrep "$virtual_kbd" > /dev/null 2>&1
		then
			killall "$virtual_kbd"
		fi
	else
		# The user rotated the screen. Start the virtual keyboard since he
		# might need it.
		"$virtual_kbd" > /dev/null 2>&1 &
	fi
fi

###############################################################################
#                           TrackPoint and TouchPad                           #
###############################################################################

# Enable and disable the TrackPoint. First, find the id of the TrackPoint.
trackpoint_id="$(xinput list | grep TrackPoint | grep --only-matching -P 'id=(\d+)' | cut -c 4-)"
touchpad_id="$(xinput list | grep TouchPad | grep --only-matching -P 'id=(\d+)' | cut -c 4-)"

# Set the mode to which the input devices should be set.
if [[ "$setto" = "normal" ]]
then
	input_to=1
else
	input_to=0
fi

for device in "$trackpoint_id" "$touchpad_id"
do
	echo "Toggling input device $device to $input_to."
	xinput set-prop "$device" "Device Enabled" "$input_to"
done
